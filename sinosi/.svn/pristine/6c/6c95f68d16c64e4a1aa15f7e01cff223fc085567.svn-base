package br.gov.go.secima.unidadeconservacao.util;

import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Address;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.net.ssl.X509TrustManager;

import br.com.ambientinformatica.util.UtilException;
import br.com.ambientinformatica.util.UtilLog;
import br.com.ambientinformatica.util.UtilRecurso;

/**
 * Classe que envia email
 * 
 */
public class Mail {	

    /**
     * Envia um email
     * 
     * @param pacoteProp nome do pacote acrescido do nome do arquivo
     *  em que encontram as propriedades (sem a extensao .properties)
     * @param mensagem
     * @param login
     * @param senha
     * @throws UtilException 
     * @throws GeneralSecurityException 
     * @throws IOException
     */
    public void enviarEmail(String pacoteProp, Mensagem mensagem,String login,String senha) throws UtilException, GeneralSecurityException{
        Properties prop = UtilRecurso.getProperties(pacoteProp);
        enviarEmail(prop, mensagem, login,senha);
    }

    private static class DefaultTrustManager implements X509TrustManager {

        @Override
        public void checkClientTrusted(X509Certificate[] xcs, String string) throws CertificateException {
        }

        @Override
        public void checkServerTrusted(X509Certificate[] xcs, String string) throws CertificateException {
        }

        @Override
        public X509Certificate[] getAcceptedIssuers() {
            return null;
        }
    }

    /**
     * Envia um email
     * 
     * @param mensagem  
     */
    public void enviarEmail(Properties prop, Mensagem mensagem,String login, String senha) {
        final String log = login;
        final String pass = senha;
        Session session = Session.getInstance(prop, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(log, pass);
            }
        });
        session.setDebug(false);
        MimeMessage msg = new MimeMessage(session);

        try {
            msg.setFrom(new InternetAddress(mensagem.getDe()));
            msg.setRecipient(Message.RecipientType.TO, new InternetAddress(
                    mensagem.getPara()));

            msg.setSentDate(new Date());
            msg.setSubject(mensagem.getAssunto(), "utf-8");
            msg.setContent(mensagem.getConteudo(), "text/html");
            if(mensagem.getResponderPara() != null){
                msg.setReplyTo(new Address[]{new InternetAddress(mensagem.getResponderPara())});
            }
            Transport.send(msg);
        } catch (AddressException e) {
            UtilLog.getLog().error("erro ao enviar email", e);
        } catch (MessagingException e) {
            UtilLog.getLog().error("erro ao enviar email", e);
        }
    }


    public void enviarEmailAnexo(Properties prop, Mensagem mensagem,String login, String senha,List<File> anexos) {
        final String log = login;
        final String pass = senha;
        Session session = Session.getDefaultInstance(prop, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(log, pass);
            }
        });
        session.setDebug(false);
        MimeMessage msg = new MimeMessage(session);

        try {
            msg.setFrom(new InternetAddress(mensagem.getDe()));
            msg.setRecipient(Message.RecipientType.TO, new InternetAddress(
                    mensagem.getPara()));

            msg.setSentDate(new Date());
            msg.setSubject(mensagem.getAssunto());

            if(mensagem.getResponderPara() != null){
                msg.setReplyTo(new Address[]{new InternetAddress(mensagem.getResponderPara())});
            }

            if(anexos != null && anexos.size() > 0){
                MimeMultipart mp = new MimeMultipart();
                mp.setSubType("related");
                MimeBodyPart mbp1 = new MimeBodyPart();
                mbp1.setContent(mensagem.getConteudo(), "text/html");
                mp.addBodyPart(mbp1);

                for(File caminho : anexos){
                    MimeBodyPart mbp2 = new MimeBodyPart();
                    FileDataSource fds = new FileDataSource(caminho);
                    mbp2.setFileName(fds.getName());
                    mbp2.setDataHandler(new DataHandler(fds));
                    mbp2.setHeader("Content-ID", "anexo");
                    mp.addBodyPart(mbp2);
                }                
                msg.setContent(mp);                
            }
            Transport.send(msg);
        } catch (AddressException e) {
            UtilLog.getLog().error("erro ao enviar email", e);
        } catch (MessagingException e) {
            UtilLog.getLog().error("erro ao enviar email", e);
        }
    }
    /**
     * Envia um email
     * 
     * @param pacoteProp nome do pacote acrescido do nome do arquivo
     *  em que encontram as propriedades (sem a extensao .properties)
     * @param mensagem
     * @param login
     * @param senha
     * @throws UtilException 
     * @throws IOException
     */
    public void enviarEmailAnexo(String pacoteProp, Mensagem mensagem,String login, String senha, List<File> anexos) throws UtilException{
        Properties prop = UtilRecurso.getProperties(pacoteProp);
        enviarEmailAnexo(prop, mensagem, login, senha, anexos);
    }

    /**
     * Validar emails - boolean 
     * @param email
     * @return true
     */
    public boolean validarEmail(String email){
        Pattern p = Pattern.compile(".+@.+\\.[a-z]+");  
        //Match the given string with the pattern  
        Matcher m = p.matcher(email);  
        //check whether match is found   
        boolean matchFound = m.matches();  

        if (matchFound)  {
            return true;
        }
        return false;
    }

}



