package br.gov.go.secima.unidadeconservacao.util;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.springframework.dao.DataAccessException;
import org.springframework.security.GrantedAuthority;
import org.springframework.security.GrantedAuthorityImpl;
import org.springframework.security.userdetails.UserDetails;
import org.springframework.security.userdetails.UserDetailsService;
import org.springframework.security.userdetails.UsernameNotFoundException;

import br.com.ambientinformatica.ambientjsf.util.UtilFaces;
import br.com.ambientinformatica.util.UtilLog;

public class UsuarioService implements UserDetailsService{

    private DataSource dataSource;

    private static void registrarHistoricoLogin(Connection con, String cpf) throws SQLException{
        Date agora = new Date();
        PreparedStatement pstmtUsuario = con.prepareStatement("update usuario set dataultimoacesso = ? where cpf = ?");
        pstmtUsuario.setTimestamp(1, new Timestamp(agora.getTime()));
        pstmtUsuario.setString(2, cpf);
        pstmtUsuario.execute();
        pstmtUsuario.close();

        PreparedStatement pstmtHistorico = con.prepareStatement("insert into historicologin (id, data, usuario_id) values ((select nextval('historicologin_seq')), ?, (select id from usuario where cpf = ?))");
        pstmtHistorico.setTimestamp(1, new Timestamp(agora.getTime()));
        pstmtHistorico.setString(2, cpf);
        pstmtHistorico.execute();
        pstmtHistorico.close();
    }

    @Override
    public UserDetails loadUserByUsername(String cpf){
        try {
            Connection con = dataSource.getConnection();
            String sqlUsuario = "SELECT cpf AS username, senha as password, confirmado AS enabled FROM usuario WHERE cpf = ?";
            String sqlPapeis = "select papeis as authority from usuario_papeis where usuario_id = (select id from usuario where cpf = ?)";

            try{
                PreparedStatement pstmt = con.prepareStatement(sqlUsuario);
                pstmt.setString(1, cpf);
                ResultSet rs = pstmt.executeQuery();

                try {
                    if (rs.next()) {
                        List<GrantedAuthority> papeis = new ArrayList<>();
                        PreparedStatement pstmtPapeis = con.prepareStatement(sqlPapeis);
                        pstmtPapeis.setString(1, cpf);
                        ResultSet rsPapeis = pstmtPapeis.executeQuery();
                        UserDetails user;
                        try {
                            while (rsPapeis.next()) {
                                papeis.add(new GrantedAuthorityImpl(rsPapeis.getString("authority")));
                            }
                            papeis.add(new GrantedAuthorityImpl("USUARIO"));
                            user = new UsuarioImpl(cpf,
                                    rs.getString("password"),
                                    rs.getBoolean("enabled"), true, true, true,
                                    papeis.toArray(new GrantedAuthority[0]));

                            HttpServletRequest req = UtilFaces.getRequest();
                            String windowName = cpf.replace(".", "").replace("-","") + new Date().getTime();
                            HttpSession session = req.getSession();  
                            if(session != null){
                                session.setAttribute("windowName", windowName);
                                session.setAttribute("windowNameToSet", windowName);
                                registrarHistoricoLogin(con, cpf);
                            }

                        } finally {
                            pstmtPapeis.close();
                            rsPapeis.close();
                        }
                        return user;
                    } else {
                        throw new UsernameNotFoundException("Usuário " + cpf + " não encontrado.");
                    }
                } finally {
                    pstmt.close();
                    rs.close();
                }
            }finally{
                con.close();
            }
        } catch (RuntimeException e) {
            UtilLog.getLog().error(e.getMessage(), e);
            throw new DataAccessExceptionImpl(e.getMessage(), e);
        } catch (SQLException e) {
            UtilLog.getLog().error(e.getMessage(), e);
            throw new DataAccessExceptionImpl(e.getMessage(), e);
        }
    }

    public DataSource getDataSource() {
        return dataSource;
    }

    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    private static class DataAccessExceptionImpl extends DataAccessException{

        private static final long serialVersionUID = 1L;

        public DataAccessExceptionImpl(String msg, Exception e) {
            super(msg, e);
        }

    }

}
