package br.gov.go.secima.unidadeconservacao.persistencia;

import java.util.List;

import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import br.com.ambientinformatica.ambientjsf.util.UtilFaces;
import br.com.ambientinformatica.jpa.exception.PersistenciaException;
import br.com.ambientinformatica.jpa.exception.ValidacaoException;
import br.com.ambientinformatica.jpa.persistencia.PersistenciaJpa;
import br.com.ambientinformatica.util.UtilCpfCnpj;
import br.com.ambientinformatica.util.UtilLog;
import br.com.ambientinformatica.util.UtilTexto;
import br.gov.go.secima.unidadeconservacao.entidade.EnumPapelUsuario;
import br.gov.go.secima.unidadeconservacao.entidade.Usuario;
import br.gov.go.secima.unidadeconservacao.util.StringXorCriptografia;
import br.gov.go.secima.unidadeconservacao.util.UtilUnidadeConservcao;

@Repository("usuarioDao")
public class UsuarioDaoJpa extends PersistenciaJpa<Usuario> implements UsuarioDao{

    private static final long serialVersionUID = 1L;

    @Override
    @Transactional(rollbackFor=PersistenciaException.class)
    public void criarNovoUsuario(Usuario usuario, String confirmarSenha) throws PersistenciaException{
        validarUsuario(usuario, confirmarSenha);
        try{
            Usuario usuarioBanco = consultarPorCpf(usuario.getCpf());
            if(usuarioBanco != null){
                if(!usuarioBanco.isConfirmado()){
                    usuarioBanco.setSenhaNaoCriptografada(usuario.getSenha());
                    usuarioBanco.setCelular(usuario.getCelular());
                    usuarioBanco.setCep(usuario.getCep());
                    usuarioBanco.setDataNascimento(usuario.getDataNascimento());
                    usuarioBanco.setEmail(usuario.getEmail());
                    usuarioBanco.setEndereco(usuario.getEndereco());
                    usuarioBanco.setMunicipio(usuario.getMunicipio());
                    usuarioBanco.setNome(usuario.getNome());
                    usuarioBanco.setRg(usuario.getRg());
                    usuarioBanco.setTelefone(usuario.getTelefone());
                    Usuario usuarioEmail = alterar(usuarioBanco);
                    enviarEmailConfirmacaoCadastro(usuarioEmail);
                } 
            }else{
                usuario.setSenhaNaoCriptografada(usuario.getSenha());
                Usuario usuarioEmail = alterar(usuario);
                enviarEmailConfirmacaoCadastro(usuarioEmail);
            }
        } catch (Exception e) {
            UtilLog.getLog().error(e.getMessage(), e);
            throw new PersistenciaException("Erro ao salvar usuário", e);
        }
    }

    @Override
    public void recuperarSenha(String cpf, String email) throws PersistenciaException{
        Usuario usuarioEmail;
        String host = UtilFaces.getRequest().getScheme() + "://" + UtilFaces.getRequest().getHeader("Host");

        try {
            usuarioEmail = this.consultarPorCpf(cpf);
        } catch (Exception e) {
            UtilLog.getLog().error(e.getMessage(), e);
            throw new PersistenciaException(e);
        }

        if(usuarioEmail != null){
            if(!usuarioEmail.getEmail().equals(email)){ 
                String[] aEmail = usuarioEmail.getEmail().split("@");
                String emailT = aEmail[0].substring(0, aEmail[0].length() - aEmail[0].length()/2) + "*****@" + aEmail[1];
                throw new ValidacaoException(String.format("O e-mail informado está diferente do e-email cadastrado para este cpf. (%s)",  emailT));
            }

            usuarioEmail.gerarToken();
            usuarioEmail.setAlterarSenha(true);
            StringBuilder conteudo = new StringBuilder();
            conteudo.append("<table align='center' bgcolor='#ffffff' border='0' cellpadding='0' cellspacing='0' style='color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 12.8000001907349px; line-height: normal;' width='570'>");
            conteudo.append("<tbody bgcolor='#DCEDC8'><tr>");
            conteudo.append("<td align='middle' style='font-family: Helvetica, Arial, sans-serif; margin: 0px; color: rgb(43, 43, 43); font-size: 20px; line-height: 24px; padding: 0px 34px 10px;'>");
            conteudo.append("<p><a href='");
            conteudo.append(host);
            conteudo.append("/unidadeconservacao/alterarSenhaExterno.secima?token=" + usuarioEmail.getToken());
            conteudo.append("' target='_blank'><img alt='Unidade de Conservação' src='");
            conteudo.append(host);
            conteudo.append("/unidadeconservacao/resources/imagens/logo-unidadeconservacao.png");
            conteudo.append("' style='border-width: 0px; border-style: solid; margin: 0px;' /></a></p>");
            conteudo.append("<p><strong>Redefini&ccedil;&atilde;o de&nbsp;<span class='il'>Senha</span></strong></p>");
            conteudo.append("</td></tr><tr>");
            conteudo.append("<td style='font-family: Helvetica, Arial, sans-serif; margin: 0px; color: rgb(43, 43, 43); font-size: 14px; padding: 0px 34px 25px; line-height: 20px; font-weight: lighter;'>Ol&aacute;, ");
            conteudo.append(usuarioEmail.getNome());
            conteudo.append("!<p>Para voltar acessar o sistema, voc&ecirc; precisa criar uma nova senha.</p>");
            conteudo.append("<p style='color: rgb(69, 69, 69); font-family: Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px;'><b>Veja como &eacute; f&aacute;cil:</b>");
            conteudo.append("<p>1. Clique no link de redefini&ccedil;&atilde;o de senha.</p>");
            conteudo.append("<p>2. Na pagina que abrir preencha os campos com sua nova senha e clique no bot&atilde;o 'Alterar'.</p>");
            conteudo.append("<p>3. Fa&ccedil;a o login no sistema com a sua nova senha.</p>");
            conteudo.append("<p style='color: rgb(69, 69, 69); font-family: Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px;'><a href='");
            conteudo.append(host);
            conteudo.append("/unidadeconservacao/alterarSenhaExterno.secima?token=" + usuarioEmail.getToken());
            conteudo.append("' style='color: rgb(229, 9, 20);' target='_blank'>Clique aqui</a>&nbsp;para acessar a p&aacute;gina de redefini&ccedil;&atilde;o de senha.</p></td></tr>");
            conteudo.append("<tr><td style='font-family: Helvetica, Arial, sans-serif; font-size: 14px; font-weight: lighter; padding: 0px 34px 35px; line-height: 20px;'>Voc&ecirc; n&atilde;o solicitou a altera&ccedil;&atilde;o "
                    + "de sua&nbsp;</span><span class='il' style='color: rgb(43, 43, 43); font-family: Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px;'>senha</span><span style='color: rgb(43, 43, 43); font-family: "
                    + "Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px;'>? Ent&atilde;o ignore este e-mail. Caso tenha d&uacute;vidas, estamos &agrave; disposi&ccedil;&atilde;o para ajudar. Entre em contato conosco pelos telefones&nbsp;  (62) 3265-1303 e (62) 3265-1348"
                    + "</span><span style='color: rgb(43, 43, 43); font-family: Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px;'>&nbsp;quando quiser.</td></tr>");
            conteudo.append("<tr><td style='font-family: Helvetica, Arial, sans-serif; font-size: 14px; font-weight: lighter; padding: 0px 34px 35px; line-height: 20px;'>Obrigado, <br/> Equipe SECIMA</td></tr></tbody></table>");

            try{
                super.alterar(usuarioEmail);
                UtilUnidadeConservcao.enviarEmail(conteudo.toString(), "UNIDADE DE CONSERVAÇÃO - REDEFINIÇÃO DE SENHA", email);
            } catch (Exception e) {
                UtilLog.getLog().error(e.getMessage(), e);
                throw new PersistenciaException(e);
            }
        }else{
            throw new ValidacaoException("Não encontramos nenhum usuário com este número de CPF");
        }
    }

    @Override
    public void validarUsuario(Usuario usuario, String confirmarSenha) throws PersistenciaException {
        this.validar(usuario);
        validarSenha(usuario, confirmarSenha);

        if(UtilUnidadeConservcao.validarMenorIdade16(usuario.getDataNascimento())){
            throw new ValidacaoException("Data de nascimento inválida!");
        }

        Usuario pesEmail = consultarPorEmail(usuario.getEmail()); 
        if(pesEmail != null && !pesEmail.getCpf().equals(usuario.getCpf()) && pesEmail.getEmail().equals(usuario.getEmail())){
            throw new ValidacaoException("Já existe um usuário cadastrado com este E-mail! Utilize outro e-mail.");
        }

        Usuario pes = consultarPorCpf(usuario.getCpf());
        if(pes != null && pes.getCpf() != null && pes.getCpf().equals(usuario.getCpf()) && pes.isConfirmado()){
            throw new ValidacaoException("Já existe um usuário cadastrado com este CPF. Tente a opção de Recuperar Senha da página inicial.");
        }
    }

    @Override
    public void validarSenha(Usuario usuario, String senha) throws ValidacaoException {
        if(!usuario.getSenha().equals(senha)){
            throw new ValidacaoException("Senhas divergêntes!");
        }
        if (usuario.getSenha().length() < 3) {
            throw new ValidacaoException("A senha devara conter pelo menos 3 caracteres.");
        }
    }

    private static void enviarEmailConfirmacaoCadastro(Usuario usuarioEmail) throws PersistenciaException{
        StringBuilder assuto = new StringBuilder();
        String host = UtilFaces.getRequest().getScheme() + "://" + UtilFaces.getRequest().getHeader("Host");
        String urlConfirmacao = String.format("%s/unidadeconservacao/confirmacao?x=%s", host, new StringXorCriptografia().encode(usuarioEmail.getCpf(), StringXorCriptografia.getChave()));

        try{
            assuto.append("<div>");
            assuto.append("<table align='center' bgcolor='#ffffff' border='0' cellpadding='0' cellspacing='0' style='color: rgb(34, 34, 34); font-family: arial, sans-serif; font-size: 12.8000001907349px; line-height: normal;' width='570'>");
            assuto.append("<tbody bgcolor='#DCEDC8'><tr>");
            assuto.append("<td align='middle' style='font-family: Helvetica, Arial, sans-serif; margin: 0px; color: rgb(43, 43, 43); font-size: 20px; line-height: 24px; padding: 0px 34px 10px;'>");
            assuto.append("<p><a href='");
            assuto.append(host);
            assuto.append("' target='_blank'><img alt='Unidade de Conservação' src='");
            assuto.append(host);
            assuto.append("/unidadeconservacao/resources/imagens/logo-unidadeconservacao.png");
            assuto.append("' style='border-width: 0px; border-style: solid; margin: 0px;' /></a></p>");
            assuto.append("<p><strong>Confirma&ccedil;&atilde;o de Cadastro</span></strong></p>");
            assuto.append("</td></tr><tr>");
            assuto.append("<td style='font-family: Helvetica, Arial, sans-serif; margin: 0px; color: rgb(43, 43, 43); font-size: 14px; padding: 0px 34px 25px; line-height: 20px; font-weight: lighter;'>Ol&aacute;, ");
            assuto.append(UtilTexto.removerCaracteresNaoAlfaNumericos(usuarioEmail.getNome()));

            assuto.append("!<p>Seu cadastro foi realizado com sucesso.</p>");
            assuto.append("<p style='color: rgb(69, 69, 69); font-family: Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px;'>Agora &nbsp; <a href='");
            assuto.append(urlConfirmacao);
            assuto.append(" 'style='color: rgb(229, 9, 20);' target='_blank'>Clique aqui</a>&nbsp;para confirma-lo.</p></td></tr>");
            assuto.append("<tr><td style='font-family: Helvetica, Arial, sans-serif; font-size: 14px; font-weight: lighter; padding: 0px 34px 35px; line-height: 20px;'>Voc&ecirc; n&atilde;o solicitou o cadastro? Ent&atilde;o ignore este e-mail. "
                    + "Caso tenha d&uacute;vidas, estamos &agrave; disposi&ccedil;&atilde;o para ajudar. Entre em contato conosco pelos telefones&nbsp; (62) 3265-1303 e (62) 3265-1348"
                    + "</span><span style='color: rgb(43, 43, 43); font-family: Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px;'>&nbsp;quando quiser.</td></tr>");
            assuto.append("<tr><td style='font-family: Helvetica, Arial, sans-serif; font-size: 14px; font-weight: lighter; padding: 0px 34px 35px; line-height: 20px;'>Obrigado, <br/> Equipe SECIMA</td></tr></tbody></table></div>");
            assuto.append("<div style='background-color:#DCDCDC;'>&nbsp;</div>");
            UtilUnidadeConservcao.enviarEmail(assuto.toString(), "UNIDADE DE CONSERVAÇÃO - CADASTRO DE USUÁRIO", usuarioEmail.getEmail());
        } catch (Exception e) {
            UtilLog.getLog().error(e.getMessage(), e);
            throw new PersistenciaException(e);
        }
    }

    @Override
    public Usuario consultarPorEmail(String email) throws PersistenciaException {
        try {
            TypedQuery<Usuario> query = em.createQuery("select distinct u from Usuario u where u.email = :email", Usuario.class);
            query.setParameter("email", email);
            List<Usuario> usuarios = query.getResultList();

            if(usuarios.isEmpty()){
                return null;
            }else{
                return usuarios.get(0);
            }
        }catch (Exception e) {
            UtilLog.getLog().error(e.getMessage(), e);
            throw new PersistenciaException("Erro ao consultar usuário por e-mail.", e);
        }
    }

    @Override
    public Usuario consultarPorCpf(String cpf) throws PersistenciaException {
        validarCpf(cpf);
        try {
            TypedQuery<Usuario> query = em.createQuery("select distinct u from Usuario u where u.cpf = :cpf", Usuario.class);
            query.setParameter("cpf", cpf);
            query.setMaxResults(1);
            List<Usuario> usuarios = query.getResultList();

            if (usuarios != null && !usuarios.isEmpty()){
                return usuarios.get(0);
            }else{
                return null; 
            }
        } catch (Exception e) {
            UtilLog.getLog().error(e.getMessage(), e);
            throw new PersistenciaException("Erro ao consultar usuário por CPF.", e);
        }
    }

    private static void validarCpf(String cpf) throws ValidacaoException {
        if(!UtilCpfCnpj.validar(cpf)){
            throw new ValidacaoException("CPF/CNPJ inválido!");
        }
    }

    @Override
    public List<Usuario> listarPorCpfEmailNomeMenosAdmin(String cpf, String nome, String email, boolean admin, EnumPapelUsuario papelFiltro) throws PersistenciaException{
        try {
            String sql = "select distinct u from Usuario u left join fetch u.papeis p where 1=1 ";

            if(!admin){
                sql += " and cpf != '111.111.111-11'";
            }
            if(cpf != null && !cpf.isEmpty()){
                sql += " and u.cpf = :cpf";
            }
            if(nome != null && !nome.isEmpty()){
                sql += " and upper(u.nome) like upper(:nome)";
            }
            if(email != null && !email.isEmpty()){
                sql += " and upper(u.email) like upper(:email)";
            }
            if(papelFiltro != null ){
                sql += " and p = :papelFiltro";
            }

            TypedQuery<Usuario> query = em.createQuery(sql, Usuario.class);

            if(cpf != null && !cpf.isEmpty()){
                query.setParameter("cpf", cpf);
            }
            if(nome != null && !nome.isEmpty()){
                query.setParameter("nome", "%" + nome + "%");
            }
            if(email != null && !email.isEmpty()){
                query.setParameter("email", "%" + email + "%");
            }
            if(papelFiltro != null){
                query.setParameter("papelFiltro", papelFiltro);
            }

            return query.getResultList();

        } catch (Exception e) {
            UtilLog.getLog().error(e.getMessage(), e);
            throw new PersistenciaException("Erro ao listar usuários", e);
        }
    }

    @Override
    public Usuario consultarPorToken(String token) throws PersistenciaException{
        try {
            TypedQuery<Usuario> query = em.createQuery("select distinct u from Usuario u where u.token = :token", Usuario.class);
            query.setParameter("token", token);
            List<Usuario> usuarios = query.getResultList();

            if (usuarios.isEmpty()) {
                return null;
            }else{
                return usuarios.get(0);
            }
        } catch (Exception e) {
            UtilLog.getLog().error(e.getMessage(), e);
            throw new PersistenciaException("Erro ao consultar usuário por token", e);
        }

    }

}