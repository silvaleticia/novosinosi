package br.gov.go.secima.unidadeconservacao.entidade;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;

import br.com.ambientinformatica.jpa.util.CpfCnpj;
import br.com.ambientinformatica.util.AmbientValidator;

@Entity
public class Pessoa {

    @Id
    @GeneratedValue(generator="pessoa_seq", strategy=GenerationType.SEQUENCE)
    @SequenceGenerator(name="pessoa_seq", sequenceName="pessoa_seq", allocationSize=1, initialValue=1)
    private Integer id;

    @Enumerated(EnumType.STRING)
    private EnumTipoPessoa tipo = EnumTipoPessoa.ORGAO;

    @NotEmpty(message="Informe o CPF/CNPJ do ORGÃO/PROPRIETÁRIO", groups=AmbientValidator.class)
    @CpfCnpj(message="CPF/CNPJ inválido", groups=AmbientValidator.class)
    @Column(unique=true, nullable=false)
    private String cpfCnpj;

    @Temporal(TemporalType.TIMESTAMP)
    private Date datacriacao = new Date();

    @Length(min=0, max=255, message="O limite do campo Inscrição Estadual do Gerador de 255 caracteres.", groups=AmbientValidator.class)
    @Column(length=255)
    private String inscricaoEstadual;

    @Length(min=0, max=255, message="O limite do campo RG do Gerador é de 255 caracteres.", groups=AmbientValidator.class)
    @Column(length=255)
    private String rg;

    @Column(unique=true,length=255)
    @NotEmpty(message="Informe o Endereço de E-mail do Orgão/Proprietário", groups=AmbientValidator.class)
    @Email(message="Informe um Endereço de E-mail válido para o Orgão/Proprietário", groups=AmbientValidator.class)
    @Length(min=0, max=255, message="O limite do campo E-mail do Orgão/Proprietário é de 255 caracteres.", groups=AmbientValidator.class)
    private String email;

    @NotEmpty(message="Informe o nome do Orgão/Proprietário", groups=AmbientValidator.class)
    @Length(min=0, max=255, message="O limite do campo nome do Orgão/Proprietário é de 255 caracteres.", groups=AmbientValidator.class)
    @Column(nullable=false, length=255)
    private String nome;

    @NotEmpty(message="Informe o Endereço", groups=AmbientValidator.class)
    @Column(nullable=false, length=255)
    @Length(min=0, max=255, message="O limite do campo Endereço do Orgão/Proprietário é de 255 caracteres.", groups=AmbientValidator.class)
    private String endereco;

    @NotEmpty(message="Informe o Cep do Orgão/Proprietário", groups=AmbientValidator.class)
    private String cep;

    @Column(nullable=false)
    @NotEmpty(message="Informe o Telefone do Orgão/Proprietário", groups=AmbientValidator.class)
    @Length(min=10, max=15, message="Informe corretamente o telefone (incluindo o prefixo)", groups=AmbientValidator.class)
    private String telefone;

    @ManyToOne(optional=false)
    @NotNull(message="Informe o Municipio do Orgão/Proprietário", groups=AmbientValidator.class)
    private Municipio municipio;

    @ManyToOne(optional=false)
    @NotNull(message="Usuário não informado", groups=AmbientValidator.class)
    private Usuario usuario;

    public String getEnderecoFull(){
        return String.format("%s - Município: %s - CEP: %s",
                this.getEndereco() != null ? this.getEndereco() : "",
                        this.getMunicipio() != null ? this.getMunicipio() : "",
                                this.getCep() != null ? this.getCep() : "");
    }

    public String getRgInscricao(){
        if(this.rg != null && !this.rg.isEmpty()){
            return this.rg;
        }else if(this.inscricaoEstadual != null && !this.inscricaoEstadual.isEmpty()){
            return this.inscricaoEstadual;
        }else{
            return "NÃO INFORMADO";
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((cpfCnpj == null) ? 0 : cpfCnpj.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((inscricaoEstadual == null) ? 0 : inscricaoEstadual.hashCode());
        result = prime * result + ((rg == null) ? 0 : rg.hashCode());
        result = prime * result + ((tipo == null) ? 0 : tipo.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Pessoa other = (Pessoa) obj;
        if (cpfCnpj == null) {
            if (other.cpfCnpj != null) {
                return false;
            }
        } else if (!cpfCnpj.equals(other.cpfCnpj)) {
            return false;
        }
        if (id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        if (inscricaoEstadual == null) {
            if (other.inscricaoEstadual != null) {
                return false;
            }
        } else if (!inscricaoEstadual.equals(other.inscricaoEstadual)) {
            return false;
        }
        if (rg == null) {
            if (other.rg != null) {
                return false;
            }
        } else if (!rg.equals(other.rg)) {
            return false;
        }
        if (tipo != other.tipo) {
            return false;
        }
        return true;
    }

    public EnumTipoPessoa getTipo() {
        return tipo;
    }

    public void setTipo(EnumTipoPessoa tipo) {
        this.tipo = tipo;
    }

    public String getCpfCnpj() {
        return cpfCnpj;
    }

    public void setCpfCnpj(String cpfCnpj) {
        this.cpfCnpj = cpfCnpj;
    }

    public Date getDatacriacao() {
        return datacriacao;
    }

    public void setDatacriacao(Date datacriacao) {
        this.datacriacao = datacriacao;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getEndereco() {
        return endereco;
    }

    public void setEndereco(String endereco) {
        this.endereco = endereco;
    }

    public String getCep() {
        return cep;
    }

    public void setCep(String cep) {
        this.cep = cep;
    }

    public String getTelefone() {
        return telefone;
    }

    public void setTelefone(String telefone) {
        this.telefone = telefone;
    }

    public Municipio getMunicipio() {
        return municipio;
    }

    public void setMunicipio(Municipio municipio) {
        this.municipio = municipio;
    }

    public Usuario getUsuario() {
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }

    public Integer getId() {
        return id;
    }

    public String getInscricaoEstadual() {
        return inscricaoEstadual;
    }

    public void setInscricaoEstadual(String inscricaoEstadual) {
        this.inscricaoEstadual = inscricaoEstadual;
    }

    public String getRg() {
        return rg;
    }

    public void setRg(String rg) {
        this.rg = rg;
    }

    @Override
    public String toString() {
        return nome + " - " + cpfCnpj;
    }

}
